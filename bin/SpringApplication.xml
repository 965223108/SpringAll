<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	
	<bean id="p1"  class="com.test.beans.Person">
		<property name="userName" value="testName"></property>
		<property name="userAge" value="20"></property>
		<property name="userEmail" value="192sadf"></property>
		<property name="userSex" value="1"></property>
	</bean>
	<!-- 可以省略name参数，但是这样的话必须按照构造器中参数的顺序写 ,可以使用index索引来配置
	
	<bean id="p2" class="com.beans.Person">
		<constructor-arg name="userName" value="p2name"></constructor-arg>
		<constructor-arg name="userEmail" value="sss"></constructor-arg>
		<constructor-arg name="userAge" value="20"></constructor-arg>
		<constructor-arg name="userSex" value="0"></constructor-arg>
	</bean>
	 -->
	<!-- 通过名称空间,名称空间用来区分标签的 -->
	<bean id="p3" class="com.test.beans.Person" p:userAge="12" p:userEmail="test.com"></bean>
	
	<bean id ="car1" class="com.test.beans.Car">
		<property name="car_name" value="小车"></property>
		<property name="car_price" value="123454"></property>
		<property name="car_color" value="黑色"></property>
	</bean>
	<bean id="book1" class="com.test.beans.Book">
		<property name="book_name" value="mybook"></property>
		<property name="book_price" value="12"></property>
		<property name="book_auther" value="wuming"></property>
	</bean>
	<bean id="p4" class="com.test.beans.Person">
		<!-- 可以通过ref的方式引用容器中已经存在的对象
		<property name="car" ref="car1"></property>
		 -->
		<!-- 也可以使用内部自己创建的对象,内部bean只能在内部使用不能再外边 使用，写id是没有用的 -->
		<property name="car">
			<bean class="com.test.beans.Car">
				<property name="car_name" value="mycar"></property>
				<property name="car_price" value="123"></property>
				<property name="car_color" value="mylikecolor"></property>
			</bean>
		</property>
		<property name="books">
			<list>
				<bean class="com.test.beans.Book" p:book_name="testtest"></bean>
				<ref bean="book1"/>
			</list>
		</property>
		<property name="map">
			<map>
				<entry key="01" value="sdfadf"></entry>
				<entry key="02" value="12"></entry>
				<entry key="03" value-ref="book1"></entry>
				<entry key="04">
					<bean class="com.test.beans.Car" p:car_name="baoma"></bean>
				</entry>
			</map>
		</property>
		<!-- 默认都是string类型的 -->
		<property name="properties">
			<props>
				<prop key="root">root</prop>
				<prop key="password">password</prop>
			</props>
		</property>
	</bean>
	<!-- 声明一个公用的map 可以被其他需要map类型数据的对象引用 linkedHashMap对象 -->
	<util:map id="mytestmap">
		<entry key="key1" value="keyvalue"></entry>
	</util:map>
	
	<!-- 级联属性 ,可以动态的修改数据-->
	<bean id="p5" class="com.test.beans.Person">
		<property name="car"  ref="car1"></property>
		<property name="car.car_price" value="123456"></property>
	</bean>
	<!-- 继承其他对象
		parent: 继承其他对象
		abstract：  标记的 类就不能 被其他对象继承
		depend-on :  可以控制对象的 创建顺序，默认是按照在 配置文件中 从上到下的顺序创建的
	 -->
	<bean id ="p6" parent="p1">
		<property name="userName" value="继承已有对象"></property>
	</bean>
	<!-- 
		对象的作用域：
		singleton:默认单实例，容器启动 就会被创建，在整个容器中只有此一个对象
		prototype：容器创建默认不会被创建，在获取的时候才会被创建
	 -->
	 <bean id="p7" class="com.test.beans.Person" scope="prototype"></bean>
	 
	 <!-- 
	 	工厂：
	 	静态 工厂：工厂本身不需要实例化，通过静态方法调用创建对象
	 	实例工厂：需要先实例化工厂对象，在调用工厂对象的方法创建对象
	 	也可以继承spring提供的工厂接口
	  -->
	  <bean id="static_car" class="com.test.beans.CarStaticFactory" factory-method="getCar">
	  	<constructor-arg name="car_name" value="carName"></constructor-arg>
	  	<constructor-arg name="car_price" value="12"></constructor-arg>
	  	<constructor-arg name="Car_color" value="carColor"></constructor-arg>
	  </bean>
	  <bean id="instance_factory" class="com.test.beans.CarInstanceFactory"></bean>
	  <bean id="instance_car" factory-bean="instance_factory" factory-method="getCar">
	  	<constructor-arg name="car_name" value="carname"></constructor-arg>
	  	<constructor-arg name="car_price" value="12"></constructor-arg>
	  	<constructor-arg name="car_color" value="carcolor"></constructor-arg>
	  </bean>
	  <bean id="InterfaceFactoryImpl" class="com.test.beans.MyFactoryImpl"></bean>
	  
	  <!-- 对象的生命周期 -->
	  <bean id="book2" class="com.test.beans.Book" init-method="bookInit" destroy-method="bookDestry"></bean>
	  <!-- 
	  	对象的后置处理器
	  	spring 提供了一个接口 可以在对象的初始化前后被调用
	   -->
	   <bean id="beanpostprocessor" class="com.test.beans.MyBeanPostPrecessor"></bean>
	   <!-- 引入外部资源文件,测试数据库连接池-->
	   <context:property-placeholder location="classpath:dbconfig.properties"/>
	   <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	   		<property name="user" value="${jdbc.username}"></property>
	   		<property name="password" value="${jdbc.password}"></property>
	   		<property name="jdbcUrl" value="${jdbc.url}"></property>
	   		<property name="driverClass" value="${jdbc.driverclass}"></property>
	   </bean>
	   <!-- spring中的自动赋值测试，基于xml的方式,仅仅对自定义类型的数据赋值
	   	default: 默认值，默认不自动赋值
	   	byName: 以属性名作为id，在容器中查询(ioc.getBean("car"))
	   	byType: 按照类型在容器中查找（ioc.getbean(Car.class)），如果容器中存在多个同类型的对象，就会报错，没找到装备null
	   	constructor: 按照构造器，如果对象中刚好有一个此类型的有参构造器，先按照构造器参数类型装配，如果没有就装配为null,如果找到多个同类型的实例，就根据参数名作为id继续装配，找不到就设置为null
	    -->
	   <bean id="p8" class="com.test.beans.Person" autowire="constructor"></bean>
	   
	   <!-- spel表达式测试 #{}
	      	字面量
	      	引用其他对象的某个属性值
	      	引用其他对象
	      	调用静态方法
	      	调用非静态方法：
	   -->
	   <bean id="p9" class="com.test.beans.Person">
	   		<property name="userAge" value="#{12*45}"></property>
	   		<property name="userName" value="#{p1.userName}"></property>
	   		<property name="car" value="#{car1}"></property>
	   		<property name="userSex" value="#{T(java.util.UUID).randomUUID().toString()}"></property>
	   		<property name="userEmail" value="#{p1.getUserEmail()}"></property>
	   </bean>
	   
	   <!-- 重点内容：
	   		基于注解方式把对象 加入到容器中
	   		1.	@Controller 控制层
	   		2.	@Service 业务层 
	   		3.  @Repository 数据库层
	   		4.  @Component 给不属于以上几层使用这个
	   		spring底层不会验证是哪个注解
	   		两步： 
	   		   1.。添加注解
	   		   2.  开启spring自动 扫描的特性 context:component-scan自动组件扫描
	   		   3.一定要导入AOP包，支持包扫描功能
	   		特点：
	   		   1. 通过注解的方式跟通过配置文件的方式是一样的
	   		   2.注解加到容器中的对象默认是以类名小写作为id的
	   		   3.都是单例 模式
	   	    注解方式和配置方式的区别：
	   	       1. 自己写的类可以通过注解加到容器比较方便，如果是第三方的对象想要加入到容器中就需要使用配置文件的方式
	   	       
	   	 使用：
	   	 1. @AutoWired: spring在启动的时候，会自动给这个属性赋值，需要保证在容器中已经存在这个对象才可以
	   	 2. @Resource  javaee的标准，扩展性比较强
	   	 3. @Inject
	   	       
	    -->
	    <context:component-scan base-package="com.test" use-default-filters="true">
	    	<!-- 扫描的时候排除某些注解，另外一个与之相反(需要禁用掉默认规则)
	    		annotation：按照注解
	    		aspectj：
	    		assignable：按照类 
	    		custom：自定义一个接口TypeFileter接口，自己写代码来决定那些
	    		regex：使用正则表达式
	    	 -->
	    	<context:exclude-filter type="annotation" expression=""/>
	    </context:component-scan>
	   <!-- 泛型注入
	   		注入对象的时候，也会参考泛型参数,
	   		spring使用带 泛型的弗雷类型来确定这个子类
	   	 -->

	   <!-- 面向切面编程
	   
	   		需要导包：spring-aspects(功能 比较基础)
	   		加强版的还需要导入：
	   			springsource.net.sf.cglib
	   			org.aopalliance
	   			org.aspectj.weaver
	   		步骤（注解方式）：
	   			1. 将目标列和切面类放到 容器中
	   			2. 声明哪个类是切面类
	   			3. 告诉spring每个方法什么时候执行
	   			4. 开启基于AOP注解的功能
	    -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- AOP配置方式,先把切面加到容器中  -->
	<bean id="mylog" class="com.test.aop.MyLogUtil"></bean>
	<aop:config>
		<!-- 声明切面 -->
		<aop:aspect ref="mylog" order="10">
		<!-- 声明一个通用的切入点 -->
		  <aop:pointcut expression="execution(public int com.test.aop.MyCalculateByCglib.*(int,int))" id="mypointcut"/>
		  <!-- 切入的方法 -->
		  <aop:after method="logStart" pointcut-ref="mypointcut"/>
		  <aop:after-returning method="logSuccess" pointcut="execution(public int com.test.aop.MyCalculateByCglib.*(int,int))" returning="result"/>
		</aop:aspect>
	</aop:config>
	
	<!-- jdbc template -->
	<!-- 
	    步骤：
	    1. 导包 spring-tx,spring-jdbc,spring-orm
	 -->
	 <!-- 普通 template -->
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<constructor-arg name="dataSource" ref="datasource"></constructor-arg>
	 </bean>
	 <!-- 具名template -->
	 <bean id="namedTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
	 	<constructor-arg name="dataSource" ref="datasource"></constructor-arg>
	 </bean>
	 
	 <!-- 声明式事务 -->
	 <!-- 
	 	声明书事务
	 		一致性
	 		原子性
	 		隔离性
	 		持久性
	 	spring的声明式事务：PlatformTransactionManager 主要这个接口
	    步骤：
	    1. 把事务管理切面配置到容器中（管理器DataSourceTransactionManager） 
	    2. 开启事务控制的注解驱动功能
	    3.给事务方法添加注解
	  -->
	  <tx:annotation-driven transaction-manager="DataSourceTransactionManager"/>
	  <bean id="DataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  		<property name="dataSource" ref="datasource"></property>
	  </bean>
	  <!-- 
	  	基于xml的方式配置事务
	  	 1. 把事务管理切面配置到容器中（管理器DataSourceTransactionManager） 
	      2.配置处事务方法
	      3.告诉spring哪些方法是事务（事务切面按照我们得切入点表达式切入方法）
	   -->
	   <aop:config>
	   		<aop:pointcut expression="execution(* com.test.transition.*.*(..))" id="txpointcut"/>
	   		<!-- 事务建议增强 advice-ref 执行事务管理器的配置-->
	   		<aop:advisor advice-ref="myadvice" pointcut-ref="txpointcut"/>
	   </aop:config>
	   <!-- 指定是配置哪个事务管理器的 -->
	   <tx:advice id="myadvice" transaction-manager="DataSourceTransactionManager">
	   		<!-- 配置事务属性 ,切入点表达式只是告诉spring需要切入哪些方法 ，当时哪些方法需要添加事务还需要自己指定-->
	   		<tx:attributes>
	   			<tx:method name="checkout()" propagation="REQUIRED"/>
	   			<tx:method name="*"/>
	   		</tx:attributes>
	   </tx:advice>
	
</beans>
